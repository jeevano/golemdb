// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pd.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PD_Heartbeat_FullMethodName = "/rpc.PD/Heartbeat"
)

// PDClient is the client API for PD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type pDClient struct {
	cc grpc.ClientConnInterface
}

func NewPDClient(cc grpc.ClientConnInterface) PDClient {
	return &pDClient{cc}
}

func (c *pDClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, PD_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDServer is the server API for PD service.
// All implementations must embed UnimplementedPDServer
// for forward compatibility
type PDServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedPDServer()
}

// UnimplementedPDServer must be embedded to have forward compatible implementations.
type UnimplementedPDServer struct {
}

func (UnimplementedPDServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPDServer) mustEmbedUnimplementedPDServer() {}

// UnsafePDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDServer will
// result in compilation errors.
type UnsafePDServer interface {
	mustEmbedUnimplementedPDServer()
}

func RegisterPDServer(s grpc.ServiceRegistrar, srv PDServer) {
	s.RegisterService(&PD_ServiceDesc, srv)
}

func _PD_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PD_ServiceDesc is the grpc.ServiceDesc for PD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PD",
	HandlerType: (*PDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _PD_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pd.proto",
}
